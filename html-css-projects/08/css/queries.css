/* *WE WILL WRITE THE MEDIA QUERIES IN THIS FILE */

/* 
  * to write media queries
  * First we need to define breakpoints which basically the width we want to set for media queries so to do that we need to check the website with many different size and define where is breakpoint
! one rem and em do NOT depend on html font-size in media queries, Instead 1rem = 1em = 16px(which is by default browser)
? the different between em and rem
* rem is the root font size
* em is the current font size
? so why we also need to use em? 
* because rem unit has some bugs in some browsers when used in media queries and therefore we should not use rem unit in media queries but em unit
* em is work exactly in the same like rem unit
  */

/* * so now we want set the first breakpoint is 1366px but we need to use em unit right so we will divide 16px
* 1366px/16px = 85.375 but we will use the round number: 85em => 85em = 1360px */

/* !FIRST BREAKPOINT: 1360px(85em) */
@media (max-width: 85em) {
  /* * now here we want decease the size of hero section to 1200px like the container we set for all section to create better look */
  .hero {
    /* * rem unit in here still use normal but we don't use it for media queries ok only use em */
    max-width: 120rem;
    margin: 0 auto;
  }

  .heading-primary {
    font-size: 4.4rem;
  }

  .gallery {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* * so now we can see when we decrease the width to 1200px now so many element like text image in many section still big, it's not break our layout but it's not good to look and present 
* therefore we also need the media for this breakpoint 1200px: 75em*/

/* ! now in fact everything we're doing here only works because we already have the other three responsive web design ingredients already in place
* so we already have a fluid grid and responsive images(flexible image) and responsive unit, otherwise none of this would work at all */

/* !BELLOW 1200px: 75em LANDSCAPE TABLET */
@media (max-width: 75em) {
  /* * because we need to edit many elements like text, image, space down so it looks like general reset right 
 * therefore we can use the responsive unit which we set when we start code CSS files, that's rem unit 
 * everything length we did in every element is rem unit and rem unit we can set it in <html> element right 
 * therefore we can do it by edit the size of rem unit in <html>  */
  html {
    /* * so if we change the font-size <=> we change 1rem = the value here
    * so every single element will change
    * and this is big trick using technique
    * we only define 1 rem = how much to suite with our layout right, so it's very great we only do it in one step
    * so now we will try 9px => 9px/16px = 56.25% */
    font-size: 56.25%;
  }
  /* ! the change from the trick above very cool and it's solve a lot issues break layout in this range breakpoint but not at all
  ! some element is still big and look not good therefore we will change it to small by write code here but not too much */
  .heading-secondary {
    font-size: 3.6rem;
  }
  .heading-tertiary {
    font-size: 3rem;
  }
  .grid {
    /* column-gap: 4.8rem;
    row-gap: 8rem; */
    gap: 6.4rem 4.8rem;
  }

  .hero {
    gap: 4.8rem;
  }

  .main-nav-list {
    gap: 3.2rem;
  }
  .section-meals .grid {
    grid-template-columns: 1.2fr 1.2fr 1fr;
  }

  .meal-details {
    padding: 3.2rem 4.8rem 3.2rem 6.4rem;
  }
  .meal-details-title {
    font-size: 2.2rem;
  }
}

/* * now we will responding to tablet devices
! notice that: the range between breakpoint maybe 200 to 300px so we shouldn't do many media queries like per breakpoint 50px like 1200 1250 1300 not because it too much
* always do with 200 to 300px because usually in this range the website will work right if we set media with logical way 

! and so breakpoint we define here is 944px: 59em(tablet)
* now in this tablet responsive design we can give hero section to one column and center all content then after that is image */

@media (max-width: 59em) {
  html {
    /* * let change the font-size to 8px: 8/16px = 50% */
    font-size: 50%;
  }
  .grid {
    column-gap: 3.2rem;
  }
  .hero {
    /* * the layout here is easy to change, and that's power of CSS Grid and it make easier to design layout responsive */
    grid-template-columns: 1fr;
    text-align: center;
    /* * we need add padding here because the text is too wide */
    padding: 0 8rem;
    gap: 6.4rem;
  }
  .delivered-meals {
    justify-content: center;
    margin-top: 3.2rem;
  }
  .hero-description {
    /* * because this content here to wide so we need to custom this with this breakpoint */
    width: 80%;
    margin: 0 auto 4.8rem;
  }
  .hero-img {
    width: 60%;
  }

  /* * we also need to change the logo here because it's too big with this breakpoint layout */
  .featured-logo {
    height: 2.8rem;
  }

  .step-number {
    font-size: 8.6rem;
  }
  .section-meals .grid {
    gap: 6.4rem 3.2rem;
    grid-template-columns: 1.3fr 1.3fr 1fr;
  }
  .meal-details-title {
    font-size: 2.4rem;
  }
  .meal-details-list {
    font-size: 2rem;
  }
  .meal-details {
    padding: 3.2rem 2.4rem 3.2rem 4.8rem;
  }

  .section-testimonials {
    grid-template-columns: 1fr;
  }
  .testimonials {
    column-gap: 4.8rem;
  }
  /* ! we can see the power from CSS Grid it helps us do it easier */
  .gallery {
    grid-template-columns: repeat(6, 1fr);
  }

  .cta {
    grid-template-columns: 1.2fr 1fr;
    gap: 4.8rem;
  }

  .cta-header .heading-secondary {
    font-size: 3rem;
  }
  .cta-text {
    font-size: 1.6rem;
  }
  .cta-form {
    grid-template-columns: 1fr;
  }
  .main-nav {
    /* display: none; */
  }
  .mobile-nav-btn {
    display: flex;
    align-items: center;
  }
  .mobile-nav-icon {
  }

  .header {
    position: relative;
  }

  /* * When we open the menu we can display the popup contain nav links so how we can do that?
  * well we will use absolute position to take this nav out of flow and style it with good style popup 
  * then hide it and when we click we display it */
  .main-nav {
    display: flex;
    justify-content: center;
    align-items: center;
    /* * now we want this element here is absolute based on viewport so therefore we don't need the relative parent container */
    position: absolute;
    right: 0;
    top: 0;
    border-radius: 0.3rem;
    /* * so we want it has width 100% and height 100vh to fulfill the current tab */
    width: 100%;
    height: 100vh;
    background-color: rgba(255, 255, 255, 0.96);

    /* * now we do not display it right, we only display it when we click to this menu icon
    ! but we need to notice that when we use display none we can't manipulate with animation like transition property... therefore it's annoying right and it's not create good look  */
    /* display: none; */
    /* * therefore we will go to the next solution when we use opacity */
    opacity: 0;
    /* ! but it's not exactly hide, so we need some more manipulate to do that 
    ? we will do couple steps like bellow here:*/
    /* *1, Hide it visually */
    opacity: 0;
    /* *2 Make it unaccessible to mouse and the keyboard cuz otherwise if we do not this then if we hit the tab key it's also go to the link which is we use opacity to hide because that element is still on the page, opacity only do it in visible not remove it out flow and to prevent this issue we will use*/
    pointer-events: none;
    /* *3 hide it from screen reader, so basically telling screen reader that this element is really hidden so to do that we will use: */
    visibility: hidden;
    /*! and it's correct way to hidden element without using display: none  */

    /** we will add the nice effect that's when we click to menu icon the popup will move from the right side to the center page and it's really cool effect  */
    transform: translateX(50%);

    /* * Remember in transition property we can have three values, and the three value is type of transition
    * by default it's linear transition and of course we can change that
    * like: transition ease, ease-out, step-end... 
    * ease-out: the beginning time is faster the end time(start faster and move slow in the end)
    *ease-in: the beginning time is slower the end time(start slow and move faster in the end)
    *ease-in-out: start fast and slow in middle and start fast in the end*/
    transition: all 0.5s ease-in;
  }

  .main-nav-list {
    flex-direction: column;
    gap: 4.8rem;
    align-items: center;
  }

  .main-nav-link:link,
  .main-nav-link:visited {
    font-size: 2.4rem;
  }
  /*
  ! We should add css code when we manipulate with this screen(breakpoint) in here not in style.css cuz it belongs this breakpoint right
  *HANDLER WHEN CLICK MENU NAV ICON */
  .nav-open .main-nav {
    opacity: 1;
    pointer-events: auto;
    visibility: visible;
    transform: translateX(0%);
  }

  .nav-open .mobile-nav-icon[name="close-outline"] {
    display: block;
  }

  .nav-open .mobile-nav-icon[name="menu-outline"] {
    display: none;
  }
  /* .logos-col .logo {
    height: 2.2rem;
  } */

  .grid--footer {
    grid-template-columns: 1.1fr 1.3fr 1.2fr;
    justify-content: end;
    column-gap: 8rem;
  }

  .logos-col {
    grid-row: 1/-3;
  }
  .pricing-plan--complete::before {
    top: 4.5%;
    right: -14%;
    padding: 1.2rem 4.8rem;
  }
}

/* * Media for tablet small breakpoint 
* 45em = 720px
*BELLOW 45em: 720px*/

@media (max-width: 45em) {
  .section-meals .grid {
    grid-template-columns: repeat(2, 1fr);
    text-align: center;
  }
  .diets-box {
    grid-column: 1/-1;
    justify-self: stretch;
  }

  .diets-box .list {
    display: grid;
    justify-content: center;
    grid-template-columns: repeat(3, 1fr);
    padding: 0 2.4rem 0 3.6rem;
    width: 85%;
    margin: 0 auto;
  }

  .grid--4-cols {
    grid-template-columns: repeat(2, 1fr);
  }
  .pricing-plan {
    width: 100%;
  }
  .plan-details {
    padding: 0 6.4rem;
  }
}
