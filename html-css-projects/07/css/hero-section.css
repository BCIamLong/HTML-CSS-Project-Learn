/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
         ******* NOTE ********
  !We should divide the structure of our files: GENERAL REUSE COMPONENT, HEADER, SECTIONS, FOOTER....
  = 01: usually we will set dimension for height cuz it's easy to control
  = 02: with the small value and we don't to change when scale layout we can use px instead use rem unit like border-radius: this value here might not change anymore
  = 03: keep add the new values to system size above because then when our CSS file grown we can easy to know all the values we use and create consistent
  !we should put grid, container reuse classes on top GENERAL STYLE cuz it might use the most on our page
  = 04  padding-bottom: 70%;
    ! remember that's in here 70% is the 70% of width parent element not height(only height property is % of height parent element)
    ! and it's even true despite you manipulate with padding-bottom 
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
  **************** HEADER*****************
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fae5d3;
  /* * so we will add the fixed height for this header
     ? why do we do that? usually we allow the content to define the height and then adding some padding right
     * the reason for that we actually want this navigation sticky a bit later, so sticky meaning that as we scroll down page it should stay at the same position and for this to work it's easier when the height is actually fixed
     * of course can use padding but this way is easier and better 
      padding: 2.4rem 4.8rem;*/
  height: 9.6rem;
  padding: 0 4.8rem;
}

.logo {
  /* * usually we will set dimension for height cuz it's easy to control
  * in this case if we use width => width: 12.8rem so it's big right but with height it's 2.4rem */
  height: 2.4rem;
}
/* .header-logo {
} */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
  **************** NAVIGATION*****************
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
.main-nav {
}

.main-nav-list {
  display: flex;
  gap: 2.4rem;
  list-style: none;
}

.main-nav-link:link,
.main-nav-link:visited {
  text-decoration: none;
  color: #343a40;
  font-weight: 5000;
  transition: all 0.5s;
  /* * we don't use 2rem because it's for paragraph, we can down this value to 1.8rem */
  font-size: 1.8rem;
}

.main-nav-link:hover,
.main-nav-link:active {
  color: #cf711f;
  /* text-decoration: underline; */
  /* background-color: #fae5d3; */
}

/* * we want this class always apply for this main-nav-link so we can use the end selector, or even we can use !important keyword but it's the last case we use
! and notice that we don't to add the transition property why? because we had it in .main-nav-link selector right we don't do it */
.main-nav-link.nav-cta:link,
.main-nav-link.nav-cta:visited {
  background-color: #e67e22;
  color: #fff;
  padding: 1.2rem 2.4rem;
  border-radius: 0.3rem;
}

.main-nav-link.nav-cta:hover,
.main-nav-link.nav-cta:active {
  background-color: #cf711f;
}

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
  **************** HERO SECTION*****************
  *Usually we have hero section with special because it’s hero section which very close with the top page and contain important content we want user pay attention for it right 
  ! so it might not can be change so we might not use the reuse classes 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* .hero{} */
.section-hero {
  background-color: #fae5d3;
  /* * we also want some big space between top and bottom cuz remember that the image is fulfill the hero container and this space is also space between section
  * we want space inside so we use padding
  ! if we use margin we will create space outside hero section create whitespace */
  padding: 4.8rem 0 9.6rem 0;
}

.hero {
  /* * Now we can add some padding to do the content have space when the viewport is smaller */
  padding: 0 4.8rem;

  /* * remember in startup we also have some section have grey background color but because this website is combine between startup and calm personality so we can add the very light background color, very light of the primary color */
  /* background-color: #fae5d3;
  ! but we want this background-color entire section hero not only hero, if we do it it look strange because only hero container is color
  * this is also another reason why we should create hero container in hero section  */

  /* display: flex; */
  /* ? now we want the text-box and image is side by side 
  *so we can use flexbox and CSS grid 
  !but we should use CSS grid to easy to edit the columns and we can use the same tool(CSS grid) for layout so it's create consistent */
  display: grid;
  grid-template-columns: 1fr 1fr;
  /* column-gap: 64px; */
  /* * we also need space between element in hero so we also use 9.6em to create consistent */
  gap: 9.6em;
  align-items: center;
  margin-top: 60px;

  /* !SO NOW THE REASON WE CREATE NEW CONTAINER HERO IS CREATE FIXED WIDTH container */
  /* width: 900px; */
  /* * but remember that we should use rem unit instead use pixel unit, and it's also the ingredient in responsive web design right
  * but before that we should custom this rem unit */
  /* width: 120rem; */
  /* ! again remember that if we use width property when the we pull and smaller the tab size and it's smaller than  so the width property will not change right, but what we want here the width of this element must to adapt the viewport smaller
  * so therefore we will use: max-width property  */
  max-width: 130rem;
  margin: 0 auto;
  /* background-color: #e67e22; */
  /* margin-bottom: 4.8rem; */
}
/* .hero-description {
} */

.hero-text-box {
}

/* .hero-headline { */

/* .hero-content { */
.hero-description {
  /* * this description is describe the headline right so two this is related so the space of between them is smaller than space between buttons */
  font-size: 2rem;
  line-height: 1.6;
  margin-bottom: 4.8rem;
}

.hero-img-box {
}
.hero-img {
  /* width: 400px;
  * we want this image is flexible image so we need set for it with max-width property 
  ! but now we don't need the width fixed for this image because it's based on the container element so therefore we will use %
  * and flexible is one of ingredients of web design right and we also working with this technique*/
  /* max-width: 400px; */
  width: 100%;
}

/* .hero-btn {
  cursor: pointer;
  border: 0;
  background-color: #fff;
  padding: 16px 48px;
  margin-left: 32px;
   border-radius: 3px; 
  box-shadow: 0 0 30px 0 rgba(0, 0, 0, 0.1);
  font-weight: bold;
} */

/* .hero-link:link,
.hero-link:visited { */

/* .features-in { */
.delivered-meals {
  margin-top: 6.4rem;
  /* * in this case we use flex because we don't care about the size of the columns, we simply let the content decided the size */
  display: flex;
  /* justify-content: space-between; */
  gap: 1.6rem;
  align-items: center;
  /* gap: 15rem; */
  /* display: grid;
  row-gap: 1.6rem; */
}
.delivered-imgs {
  display: flex;
  /* justify-content: flex-start; */
  /* gap: -0.5rem
  ! set gap property to negative value is not working */
}

.customer-img {
  /* ! with the images overlap like this we can set some border to create visible to distinguish them, and the color here usually in them same with the background color of the container  */
  border: 0.3em solid #fae5d3;
  margin-left: -1.6rem;
  /* * because in the sarafy browser we have some bugs related flex image item, so we need to set both with and height(usually we only need set one of them)
  * in all our users might come from sarafy browser right we need to config for all users can use website  */
  width: 4.8rem;
  height: 4.8rem;
  border-radius: 50%;
}

.customer-img:first-child {
  margin-left: 0;
}

/* .delivered-content { */
.delivered-text {
  font-size: 1.8rem;
  font-style: italic;
}

.delivered-text span {
  /* * we can emphasize the text we want the user see by use color and bold
  ! notice when we use the text color and the background color are in the same with the root color we should test the contrast between two color use coloors tool
  * in here we have color and background-color are from the #e67e22 color right so we need to test the colors contrast  */
  color: #cf711f;
  font-weight: 600;
}

.customer-logos {
  /* display: flex;
  align-items: center;
  gap: 24px; */
  /* width: 60rem; */
  /* display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  column-gap: 3.2rem;
  row-gap: 3.2rem;
  align-items: center; */
}

.customer-logo {
  width: 9rem;
  height: auto;
}

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
  **************** FEATURED IN SECTION*****************
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
.section-featured-in {
  /* background-color: aquamarine; 
  ! so this is small section so we do not need many space between other section right*/
  /* padding: 9.6rem 0; */
  padding: 4.8rem 0 2.4rem 0;
}

.featured-logo {
  /*
  !Remember that the logo is not like image because it needs to set a certain width otherwise it’ll grow when it can so it not good when we use % and logo always have a small size right we can use rem unit and set it
  * notice when we manipulate with the element have the width big we can use height to set value and auto figure out width
  * and this way is more natural */
  height: 3.2rem;
  /* background-image: linear-gradient(
    rgba(52, 58, 64, 0.8),
    rgba(52, 58, 64, 0.1)
  ); */
  /* * so with this logo images we need to do it become gay to decrease the attention because it's has many color and these colors not what we want 
  * so we should do it become gray color to less attention, so how can we do that?
  * well we will use filter property: and filter can do many many things and one of them is grayscale() which we need */
  /* filter: grayscale(100%); */
  /* ! but we need the problem here that because the logo have many color will convert to two colors is black and gray but we need it's only one color
  * so how we solve this issue? we will use another function is called brightness
  * and we can use the property combine with brightness with called contrast to edit the contrast of these logo cuz it's too black*/
  /* filter: brightness(0) contrast(40%); */
  /* * we also have other way to do it become gray that use opacity property
  * values: 1 to 100%: visible, -n percent it'll invisible  */
  /* filter: brightness(0);
  opacity: 100%; */
  filter: brightness(0) contrast(10%);
  /* * So in this case the colors contrast is not good but one time again we break rule because this content is not important 
  * the important here is a logo and it's still look good because it has the quite big size right */
}

.featured-in-box {
  /* padding: 0 4.8rem; */
  justify-content: space-around;
}

.featured-in-heading {
  text-align: center;
  font-size: 1.6rem;
  text-transform: uppercase;
  color: #495057;
  letter-spacing: 0.05rem;
  font-weight: 500;
}

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
  **************** HOW IT WORKS SECTION*****************
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

.section-how {
  padding: 9.6rem 0;
  /* background-color: #fae5d3; */
}

/* .section-how div {
  align-items: center;
} */

/* .how-description {
  grid-column: 1/-1;
} */

.step-heading {
  /* * we should use the big space here because it's different part of the section and we can use the mid of the space between section in this case we have 192px so we can choose the number near 96px */
  margin-bottom: 9.6rem;
}

.step-text-box {
  /* align-self: center; 
* so we can do it to center the grid element itself vertically
! we have many way to do it and we should choose the best way and here we should put it in parent container, because it'll not repeat our code and easy to maintain
* and doing that we will create new reuse class to can reuse over again right*/
}

.step-description {
  font-size: 2rem;
  line-height: 1.6;
}

.step-number {
  font-size: 9.8rem;
  /* * because the font-size is big we need to down the font-weight and in this case 600 is good */
  font-weight: 600;
  /* * we also need the light color for this
  ! but now the issue here that the very light color is not good for the visible possible
  ! however we can break rules in logical situations like in this case the number is not really important so we can do it*/
  color: #ced4da;
  margin-bottom: 3.2rem;
}

.step-img-box {
  /* justify-self: center; */
  align-self: center;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
}

/* * Remember that when we have properties common value we can use list selector if it has 2 3 element right */
.step-img-box::before,
.step-img-box::after {
  content: "";
  display: block;
  border-radius: 50%;
  position: absolute;
  z-index: -1;
}

.step-img-box::before {
  /* position: absolute; */
  /* * keep in mind that's to this after or before element display we need set it the content, if not content we can set it empty string */
  /* display: block; */
  /* content: ""; */
  /* padding: 18rem;
  !remember like image we also need this element is also flexible  */
  width: 70%;
  /* height: 70%; */
  /* ! now we have an issue if we don't use position absolute in this case the height not apply with percent % unit
  * and therefore we can use nice trick for it */
  padding-bottom: 70%;
  /* ! remember that's in here 70% is the 70% of width parent element not height(only height property is % of height parent element) 
  * so it'll be create an element with the height is 0 but since we had padding-bottom: 70% now it'll be create square and we can use 50% set for border-radius to make it circle*/
  /* border-radius: 50%; */
  background-color: #fae5d3;
  /* margin-left: -50%; */
  /* 
  ! because the parent element here is position relative but it's also flexbox container so the align-items, and justify-content will also apply so we do not need to use this technique bellow
  top:50%;
  left:50%;
  transform: translate(-50%, -50%); */
  /* * Now we have an issue that this element here is on top image but we want it behind image right so how can we do that? 
  * well we will use z-index: we can put z-index to set the z direction to -1 to smaller than default of image is 1 and it'll behind
  * or we can set the z-index to .step-img to 2 to > 1 cuz by default image and this element is 1 so we need image higher to on top right*/
  /* z-index: -1; */
}

/* ? We can't use ::before pseudo element many times so we need use ::after if we want add the second pseudo element */
.step-img-box::after {
  /* content: "";
  display: block; */
  width: 55%;
  padding-bottom: 55%;
  background-color: #f8d8bd;
  /* border-radius: 50%;
  position: absolute;
  z-index: -1; */
}

.step-img {
  /* z-index: 2; */
  /* width: 24rem; 
  * width: 24rem it's fixed and then when the viewport change and smaller it'also still keep 24rem and it's not good
  ! the reason why we use div element to contain this img element to set image to value with unit % and become flexible image
  * and the image is the first we style because it's not automatically scale up or down like text and we need to do it become flexible*/
  width: 45%;
}
/* .step-img-box:nth-child(odd) {
  background-color: #e67e22;
}
.step-text-box:nth-child(even) {
  background-color: #e67e22;
} */

/* .how-text-box:nth-child(odd) {
  grid-column: 2/3;
  grid-row: 2/3;
} */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
  **************** THE MEALS SECTION *****************
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
.section-meals {
  padding: 9.6rem 0;
}
/* 
.meals-heading-box {
  grid-column: 1/-1;
} */
.meals-heading {
}
.meals-description {
}
.meal-card {
  /* background-color: aquamarine; */
  /* padding: 3.2rem; */
  box-shadow: 0 1.6rem 3.2rem 0 rgba(0, 0, 0, 0.1);
  border-radius: 0.3rem;
  /* * use overflow to hidden the part of image outside card */
  overflow: hidden;
  transition: all 0.3s;
}

.meal-card:hover {
  /* width: 101%; */
  /* * so when we hover to meal card we can move up this card little bit create nice animation */
  /* transform: translate(0, -1%); */
  /* * if we only use for Y vertically we can also use translateY() */
  transform: translateY(-1%);
  /* * but now we can also do better with do the shadow little bit dark, like when we move up the card like from the source to the light so it'll decrease shadow because it nears light right and when we end hover it'll back to shadow */
  box-shadow: 0 3.2rem 6.4rem 0 rgba(0, 0, 0, 0.07);
}

.meal-img {
  width: 100%;
  /* margin-bottom: 3.2rem; */
  /* border-radius: 0.3rem;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  ! so we use these properties to fix the image round with the container right but we also have another way to do it
  * that we will use overflow property and set to hidden */
}
.meal-details {
  padding: 3.2rem;
}

.meal-details-tags {
  margin-bottom: 1.2rem;
  gap: 0.4rem;
}

.meal-details-tag {
  /* !Which smaller text component we always style like this  */
  font-size: 1.2rem;
  display: inline-block;
  padding: 0.4rem 0.8rem;
  text-transform: uppercase;
  background-color: #51cf66;
  /* *Border radius usually go with tag element */
  border-radius: 0.3rem;
  font-weight: 600;
  /* margin-bottom: 1.2rem; */
}

.meal-details-title {
  font-size: 2rem;
  margin-bottom: 2.4rem;
  color: #343a40;
  font-weight: 600;
  line-height: 1.3;
  /* letter-spacing: 1rem; */
}
.meal-details-list {
  /* display: flex;
  flex-direction: column;
  gap: 1.6rem; */
  gap: 1.6rem;
  list-style: none;
  font-size: 1.6rem;
  line-height: 1.6;
}
.meal-details-item {
  display: flex;
  align-items: center;
  gap: 1.2rem;
}
.meal-details-icon {
  width: 2.4rem;
  height: 2.4rem;
  color: #cf711f;
}

.diets-box {
  /* justify-self: center; */
  /* align-self: center; */
  /* padding: 3.2rem; */
  /* background-color: #fae5d3; */
  border-radius: 0.3rem;
}
.diets-title {
  font-size: 2.4rem;
  font-weight: 700;
  line-height: 1.5;
  margin-bottom: 3.2rem;
  color: #212529;
}
.diets-list {
  font-size: 1.6rem;
  gap: 2.4rem;
  list-style: none;
}
.diets-item {
  display: flex;
  align-items: center;
  gap: 1.2rem;
}

.diets-icon {
  width: 2.4rem;
  height: 2.4rem;
  color: #cf711f;
}

.all-recipes {
  text-align: center;
  /* * we don't put font-size in link selector because when we reuse it we also have many different size not only one
  * and the link inside this container will inherit this font-size right  */
  font-size: 2rem;
}

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
  **************** THE TESTIMONIALS SECTION *****************
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

.section-testimonials {
  display: grid;
  /* *We can use 100fr to edit size of per part in grid, then we can divide 55fr 45fr(sum 100fr) right and it's easy to edit
  ! it's not rule, so do with 100fr is easy to edit we can also do it like 1 1.5.... So then choose the best*/
  grid-template-columns: 55fr 45fr;
  background-color: #fae5d3;
  /* align-items: center; */
}

.testimonials-heading {
  margin-bottom: 9.6rem;
}

.testimonials-container {
  /* padding: 0 0 0 4.8rem; */
  /* padding: 9.6rem 0; */
  padding: 9.6rem 3.2rem;
}

.testimonials {
}

.testimonial {
}

.testimonial-img {
  /* width: 40%; */
  width: 6.4rem;
  /* height: 30%; */
  border-radius: 50%;
  margin-bottom: 3.2rem;
}
.testimonial-text {
  font-size: 1.6rem;
  line-height: 1.6;
  margin-bottom: 2.4rem;
}
.testimonial-author {
  font-size: 1.4rem;
  /* font-weight: 500; */
  color: #495057;
}

.gallery {
  /* padding: 1.6rem;
  background-color: #fae5d3;
  gap: 1.6rem; */
  padding: 1.6rem;
  gap: 1.6rem;
  align-self: center;
}

.gallery-item {
  /* * we can use overflow hidden to hide the part of image scale and by that it will create the beautiful animation */
  overflow: hidden;
}

/* ! notice that with small image like photo of customer like this we don't want it become flexible because it's too big and flexible is only fix with the big images
* therefore we will do it fixed images */
.gallery-img {
  display: block;
  /* !by default the image is inline element so it has some space by default we can see it right 
  * So to remove this space we can use set it to block element*/
  width: 100%;
  transition: all 0.5s;
}

.gallery-img:hover {
  /* transform: scale(1.2, 1.2); 
  * if the values in the same we can use shortcut*/
  transform: scale(1.2);
  /* * rotate function will change the element with 50deg, it'll turn to 50deg, and it might good if we want create more creative animation
  ! deg is unit in CSS which stand for degree */
  /* transform: rotate(50deg); */
}
