/* ! we divided the code and structure your css file but when the our css code grow up it's too hard to maintain and read, fix code
* Therefore we need to divide many files with per part: general.css, hero.css, how-it-work.css... */

/* *-------------01 TYPOGRAPHY - FONT-SIZE SYSTEM----------------------------
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98
paragraph: default 20
*---------------------------------------------------------------------------/
*-------------02 SPACE - WHITESPACE SYSTEM----------------------------
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128 
*-------------03 FONT-WEIGHT----------------------------
Default: 400
 500(medium) / 600(semi-bold) / 700(bold)
*---------------------------------------------------------------------------/
*-------------04 LINE-HEIGHT----------------------------
Default: 1
1.1 / 1.2 / 1.3 / 1.4 / 1.5 / 1.6 / 1.7 / 1.8 / 1.9
paragraph: default 1.6
*---------------------------------------------------------------------------/
*-------------05 COLORS----------------------------
Primary: #e67e22
Tints: #fae5d3, #ced4da, #f8d8bd,
Shades:#cf711f,#495057, #51cf66
Accent:
Greys: #343a40, #212529

*-------------07 BORDER RADIUS---------------------------
Default: 3px(0.3rem)
*---------------------------------------------------------------------------/
*-------------08 LETTERS SPACING---------------------------
Default:
-0.03rem, -0.05rem, -0.1rem, 0.05rem
*---------------------------------------------------------------------------/
*/
* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

html {
  /* * Format rem unit: 62.5% = 10px/16px (16px is default and we want 1 rem = 10px to easy to calc) */
  font-size: 62.5%;
}

body {
  line-height: 1;
  font-weight: 400;
  /* * now we need to choose the typeface: inter is perfect for startup but now we also want mix with calm personality so we need the quite round typeface
  * so in this case we do not choose inter 
  ! with the typeface we need experiment many time till end project we also test typeface tp watch the change of layout and choose the best fit typeface*/
  /* font-family: "Inter", sans-serif; */
  font-family: "Rubik", sans-serif;
  color: #343a40;
}
/* !We should divide the structure of our files: GENERAL COMPONENT, HEADER, SECTIONS, FOOTER.... */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
  **************** GENERAL REUSE COMPONENTS****************
  * General reuse: basically is generic selector classes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* ! we should put grid, container reuse classes on top cuz it might use the most on our page */
/* ? CONTAINER CENTER REUSE CLASS */
.container {
  /* * max-width to do it nice and fluid 
  * 120rem is 1200px which the value we might reuse in this project
  another value can be use: 1140px
  * with this we will put all content to container with 1200px width */
  max-width: 120rem;
  /* * margin: auto value will figure out the same value of left and right side to container(in this case is viewport) and so it's do this container look like center right */
  margin: 0 auto;
  padding: 0 4.8rem;
  /* padding-right: 4.8rem;
  padding-left: 4.8rem; */
  /* * we can set the padding to create space on right and left side cuz we don't want the content don't stick to left and right side, why don't we do padding for top and bottom?
  * because the space between sections can be different right, and so we don't do it */
}

/* ? GRID REUSE CLASS 2x2 */
.grid {
  display: grid;
  column-gap: 6.4rem;
  row-gap: 9.6rem;
  /* grid-template-columns: 1fr 1fr; 
  ! we can use repeat() function as well */
  /* grid-template-columns: repeat(2, 1fr); */
}
/* ! but now this is not really is reuse class, so if we have the section design with 3 columns so it can't be apply 
* we will create the second class is called grid--3-cols
* cols stand for columns
* With technique we can export different styles with different classes to make them can be reusable across our page*/

.grid--gap-0 {
  gap: 0 !important;
}

.grid--gap-sm {
  gap: 2.4rem;
}

.grid--gap-md {
  gap: 4.8rem;
}

.grid--2-cols {
  grid-template-columns: repeat(2, 1fr);
}

.grid--3-cols {
  grid-template-columns: repeat(3, 1fr);
}

.grid--4-cols {
  grid-template-columns: repeat(4, 1fr);
}
/* ! when we have 2 or 3 selectors have in the same style property values we can use list selector to select the common styles
* but if the the numbers is more than 3 selectors like 6, 10.... So that's time we should create reuse class and reuse because that's time use list selectors will do the code become complex  
* in this case we have 3 selector heading-primary, heading-secondary, heading-tertiary and all three have common and we can use list selector
! but if we have 6 8 or more we should create reuse classes*/

.grid--center-v {
  align-items: center;
}

.grid--center-h {
  justify-items: center;
}

/* ! in the case we have many grid containers in one section so how we can manage the space between sections?
* well we will do it like we did with the list <li> element before when we set margin-bottom to all li element then set the last element not have margin-bottom
* so in this case we will set margin bottom to all grid, and if grid last child we can remove this margin-bottom 
* but now we can do it shortcut with :not pseudo class which get the element if it's not element in expression
* in this case it's not last child element*/

/* .grid:not(:last-child) {
  margin-bottom: 9.6rem;
} */

.flex {
  display: flex;
  /* gap: 4.8rem; */
}

.flex--center-v {
  align-items: center;
}

.flex--direct-col {
  flex-direction: column;
}

.flex--gap-sm {
  gap: 1.6rem;
}

.heading-primary,
.heading-secondary,
.heading-tertiary {
  color: #212529;
  font-weight: 700;
}

.heading-primary {
  /* * we should use the rem property everywhere in website */
  font-size: 5.2rem;
  /* * we can also use px unit cuz this value is very small */
  letter-spacing: -0.1rem;
  margin-bottom: 3.2rem;
  line-height: 1.1;
}

.heading-secondary {
  font-size: 4.4rem;
  letter-spacing: -0.05rem;
  line-height: 1.2;
}

.heading-tertiary {
  font-size: 3.6rem;
  letter-spacing: -0.03rem;
  line-height: 1.3;
}

.subheading {
  /* ! notice: if we set this to inline-block now the heading after this element will side by side
  ! in this case we don't see it side by side because the h3 element is block element
  * but to ready we should give it block element instead use inline-block  */
  /* display: inline-block; */
  display: block;
  font-size: 1.6rem;
  color: #cf711f;
  font-weight: 500;
  margin-bottom: 3.2rem;
  text-transform: uppercase;
  letter-spacing: 0.05rem;
}

.btn:link,
.btn:visited {
  text-decoration: none;
  border-radius: 0.3rem;
  color: #343a40;
  display: inline-block;
  padding: 1.6rem 3.2rem;
  font-size: 2rem;
  font-weight: 600;
  /* margin-left: 24px; */
  /* box-shadow: 0 0 30px 0 rgba(0, 0, 0, 0.1); */
  /* *transition property: allows us to do just what it says so to transition between two values using animation
  * transition: we can have multiple values but at least we need two things to it works
  *  =we need property which we want to animate
  *  =we need to say how much the animation happen
  * in this case we need background and color are animate: so we can use all keyword(all properties will be animate, and in this case we only background-color property change so we use background-color
  * time have two unit: s, ms(1s = 1000ms)
   ! animation means basically what we mean is to change the value of a certain or multiple properties from one to another one
   * in this case from  background-color: #e67e22; to background-color: #cf711f;
   ! remember we only put this transition property on the original state in this case before we hover
   */
  /* ! because we need the box-shadow in learn more button also animation not only back-ground 
   * so we can use all keyword to do all properties hover will animation
   * usually we always use all keyword cuz it's shortcut and easy to look */
  transition: all 0.5s;
  /* transition: background-color 0.5s; */
}

/* .hero-btn--highlight { */
.btn--full:link,
.btn--full:visited {
  background-color: #e67e22;
  color: #fff;
  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2);
  /* ! now one thing to do is space between two these button elements 
    * so we can add margin-right to this button but it's not best way
    * and we also need to reuse this class btn--full right so we don't do that
    ? so we can add another container and use flexbox or CSS grid but which only two elements and it's also not best choose
    * and we will add the modified class and in this case it's helper class: margin-right-sm which we will reuse*/
}

.btn--full:hover,
.btn--full:active {
  background-color: #cf711f;
  /* ! now in real website when we hover to button the button will have animation maybe slow and create beautiful animation but in here we simply change the color from this to other so it's not good
  * we can use just CSS to add some animation, but we need to add the state before we hover  
  */
}

.btn--outline:link,
.btn--outline:visited {
  background-color: #fff;
  color: #343a40;
}

.btn--outline:hover,
.btn--outline:active {
  background-color: #fae5d3;
  /* border: 0.3rem solid #fff; */
  /* ! when we add the border like this when we hover border is created the outside space right therefore it'll change the dimension of the content, container... so it's not what we want
  * we will use nice trick: ADD BORDER INSIDE ELEMENT WITH BOX-SHADOW PROPERTY */
  box-shadow: inset 0 0 0 3px #fff;
  /* * with this value set for box-shadow it'll scale 3px with color #fff */
}

.margin-right-sm {
  /* * so now it works and very easy to achieve 
    when we create helper classes we really want to apply this style
    >>> we can use important keyword to ensure that happen cuz it'll do this style is highest priority right
      ! with experience we will know when we should use helper classes and usually it related to margin which we want reuse in multiple places but we do not want to add to specific elements because then when we want to reuse them somewhere else it might create some conflict
      * and of course we don't use link and visited pseudo element here cuz we want use this to all element not only buttons*/

  margin-right: 2.4rem !important;
}

.margin-bottom-sm {
  margin-bottom: 2.4rem !important;
}

/* * md: medium */
.margin-bottom-md {
  margin-bottom: 4.8rem !important;
}

.margin-bottom-hg {
  margin-bottom: 9.6rem !important;
}

/* * so we should custom <strong> element when we use it, cuz by default it looks not good(too bold) 
*<strong> element which we will use the most time so we also put it in general*/
strong {
  font-weight: 500;
  /* font-size: 1.4rem; */
}

/* * Usually the tag is can be use many time so we should put it in general */
.tag {
  /* !Which smaller text component we always style like this  */
  display: inline-block;
  cursor: pointer;
  font-size: 1.2rem;
  padding: 0.4rem 0.8rem;
  text-transform: uppercase;
  /* *Border radius usually go with tag element */
  border-radius: 0.3rem;
  font-weight: 600;
  /* margin-bottom: 1.2rem; */
}

/* ! in food website like this we have few categories and each of them we can style different color by create many reuse class for per background color*/
.tag-vegetarian {
  background-color: #51cf66;
}
.tag--vegan {
  background-color: #94d82d;
}
.tag--paleo {
  background-color: #fcc419;
}

/* !LINK WITH ANIMATION 1 */
/* * the link is element we will use many time in our website on many pages and so we can create reuse class and reuse over over again */
.link:link,
.link:visited {
  /* * so because this is link not button so we can create style different with button */
  display: inline-block;
  padding-bottom: 1.2rem;
  /* background-color: #e67e22; */
  color: #e67e22;
  text-decoration: none;
  /* * remember when we use border radius to hover we need to set by the border radius for the original otherwise the animation created look not good */
  border-bottom: 0.3rem solid #fff;
  transition: all 0.3s;
}

.link:hover,
.link:active {
  /* *Usually when we hover to a link it will display the underline but we don't use text-decoration to set it to underline
  * so instead we will use border radius to to it */
  border-bottom: 0.3rem solid #cf711f;
  color: #cf711f;
}

/* !LINK WITH ANIMATION 2 */
.link:link,
.link:visited {
  display: inline-block;
  padding-bottom: 1.2rem;
  color: #e67e22;
  text-decoration: none;
  /* * we can use currentColor keyword to get the current text color */
  border-bottom: 0.2rem solid currentColor;
  transition: all 0.3s;
}

.link:hover,
.link:active {
  color: #cf711f;
  /* * notice now when we hover to link if we set border-bottom: none so now the size of border-bottom is lost and all size of layout will change and it's not good right */
  /* border-bottom: 0.2rem solid #fff; 
  * so instead we use the fixed color we can use the transparent keyword to get the background color of the parent container*/
  border-bottom: 0.2rem solid transparent;
}

.center-text {
  text-align: center;
}

/* !List is really good to reuse and in website we usually have the same list with not too much different style
* so therefore it's candidate for reuse classes
! if in our website we have the selector can use many time we should create the reuse class */
.list {
  font-size: 1.6rem;
  gap: 2.4rem;
  list-style: none;
}

.list-item {
  display: flex;
  align-items: center;
  gap: 1.2rem;
}

.list-icon {
  width: 2.4rem;
  height: 2.4rem;
  color: #cf711f;
}
